/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.info6205.UI_Main;

import com.info6205.Constants.IrisData;
import com.info6205.Constants.NNConstants;
import com.info6205.Core.BackpropNeuralNetwork;
import com.info6205.Core.Iris_Prediction;
import com.info6205.CsvManipulation.csvtoArray;
import com.info6205.CsvManipulation.csvtoarray2;
import com.info6205.CsvManipulation.imageToCsv_ObjectDataset;
import com.info6205.ImageProcessing.ImageToPixel;
import com.info6205.ImageProcessing.ObjectResize;
import com.info6205.UtilityClasses.Helper;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;

import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @author B D Sai Santosh
 */
public class NewJFrame extends JFrame {

    /**
     * Creates new form NewJFrame
     */
    BackpropNeuralNetwork backpropagationNeuralNetworks;
    public NewJFrame() throws IOException {
        initComponents();
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setForeground(Color.blue);
        jProgressBar1.setString("--Train--to update the value");
        jProgressBar2.setStringPainted(true);
        jProgressBar2.setForeground(Color.blue);
        jProgressBar2.setString("--Train--to update the value");
        jProgressBar3.setStringPainted(true);
        jProgressBar3.setForeground(Color.blue);
        jProgressBar3.setString("--Train--to update the value");
        jProgressBar4.setStringPainted(true);
        jProgressBar4.setForeground(Color.blue);
        jProgressBar4.setString("--Train--to update the value");
        jProgressBar5.setStringPainted(true);
        jProgressBar5.setForeground(Color.blue);
        jProgressBar5.setString("--Train--to update the value");
        jProgressBar6.setStringPainted(true);
        jProgressBar6.setForeground(Color.blue);
        jProgressBar6.setString("--Train--to update the value");
        jProgressBar7.setStringPainted(true);
        jProgressBar7.setForeground(Color.blue);
        jProgressBar7.setString("--Train--to update the value");
        jProgressBar8.setStringPainted(true);
        jProgressBar8.setForeground(Color.blue);
        jProgressBar8.setString("--Train--to update the value");
        jProgressBar9.setStringPainted(true);
        jProgressBar9.setForeground(Color.blue);
        jProgressBar9.setString("--Train--to update the value");
        jProgressBar10.setStringPainted(true);
        jProgressBar10.setForeground(Color.blue);
        jProgressBar10.setString("--Train--to update the value");

        jTextArea1.setText("Click on Training and Check the Console for the training Data");
        jTextArea1.setText("*********Check The Console**********");
        BackpropNeuralNetwork backpropagationNeuralNetworks = new BackpropNeuralNetwork(784, 315, 20, 10);
        this.backpropagationNeuralNetworks = backpropagationNeuralNetworks;
//       PrintStream printStream = new PrintStream(new ParrallelOutputStream(jTextArea1));
//        System.setOut(printStream);
//        System.setErr(printStream);

        jPanel1.setBackground(Color.WHITE);
        JScrollBar hbar = new JScrollBar(JScrollBar.HORIZONTAL, 30, 20, 0, 500);
        JScrollBar vbar = new JScrollBar(JScrollBar.VERTICAL, 30, 40, 0, 500);
        jPanel1.add(hbar);
        jPanel1.add(vbar);
        jButton6.setIcon(new ImageIcon("T-shirt.jpg"));
        jButton7.setIcon(new ImageIcon("Trouser.jpg"));
        jButton8.setIcon(new ImageIcon("PullOver.jpg"));
        jButton9.setIcon(new ImageIcon("dress.jpg"));
        jButton10.setIcon(new ImageIcon("coat.jpg"));
        jButton11.setIcon(new ImageIcon("sandel.jpg"));
        jButton12.setIcon(new ImageIcon("shirt.jpg"));
        jButton13.setIcon(new ImageIcon("Sneaker.jpg"));
        jButton14.setIcon(new ImageIcon("Bag.jpg"));
        jButton15.setIcon(new ImageIcon("Ankle-boot.jpg"));
        resizing();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        jButton1 = new JButton();
        jButton2 = new JButton();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jButton3 = new JButton();
        jButton4 = new JButton();
        jLabel1 = new JLabel();
        jTextField1 = new JTextField();
        jLabel2 = new JLabel();
        jTextField2 = new JTextField();
        jLabel3 = new JLabel();
        jTextField3 = new JTextField();
        jLabel4 = new JLabel();
        jTextField4 = new JTextField();
        jLabel5 = new JLabel();
        jTextField5 = new JTextField();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        jButton6 = new JButton();
        jButton8 = new JButton();
        jButton9 = new JButton();
        jButton11 = new JButton();
        jButton7 = new JButton();
        jButton12 = new JButton();
        jButton13 = new JButton();
        jButton10 = new JButton();
        jButton15 = new JButton();
        jProgressBar1 = new JProgressBar();
        jLabel6 = new JLabel();
        jButton14 = new JButton();
        jProgressBar2 = new JProgressBar();
        jProgressBar3 = new JProgressBar();
        jProgressBar4 = new JProgressBar();
        jProgressBar5 = new JProgressBar();
        jProgressBar6 = new JProgressBar();
        jProgressBar7 = new JProgressBar();
        jProgressBar8 = new JProgressBar();
        jProgressBar9 = new JProgressBar();
        jProgressBar10 = new JProgressBar();
        jButton16 = new JButton();
        jLabel9 = new JLabel();
        jTextField6 = new JTextField();
        jLabel10 = new JLabel();
        jButton18 = new JButton();
        jLabel11 = new JLabel();
        jLabel12 = new JLabel();
        jLabel13 = new JLabel();
        jLabel14 = new JLabel();
        jLabel15 = new JLabel();
        jLabel16 = new JLabel();
        jLabel17 = new JLabel();
        jLabel18 = new JLabel();
        jLabel19 = new JLabel();
        jLabel20 = new JLabel();
        jLabel22 = new JLabel();
        jLabel23 = new JLabel();
        jLabel24 = new JLabel();
        jLabel25 = new JLabel();
        jLabel26 = new JLabel();
        jLabel27 = new JLabel();
        jLabel28 = new JLabel();
        jLabel29 = new JLabel();
        jLabel30 = new JLabel();
        jLabel31 = new JLabel();
        jLabel32 = new JLabel();
        overallAccuracy = new JProgressBar();
        mnist_accuracy = new JProgressBar();
        jLabel21 = new JLabel();
        jLabel34 = new JLabel();
        jLabel35 = new JLabel();
        jLabel36 = new JLabel();
        jLabel33 = new JLabel();
        jLabel38 = new JLabel();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenu2 = new JMenu();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBackground(new Color(255, 255, 255));

        jButton1.setText("Train With IRIS");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Predict_Iris");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText("Train With MNIST");
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jButton3ActionPerformed(evt);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
        });

        jButton4.setText("Test With MNIST");
        jButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jButton4ActionPerformed(evt);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
        });

        jLabel1.setText("sepal length");

        jLabel2.setText("sepal width");

        jLabel3.setText("petal length");

        jLabel4.setText("petal width");

        jLabel5.setText("Predicted Class");

        jLabel7.setText("Predict MNIST Image");

        jLabel8.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel8.setText("Object Dataset");

        jButton6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton11.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton7.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton12.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton15.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jProgressBar1.setBackground(new Color(0, 204, 0));

        jLabel6.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel6.setText("Neural Networks -Project");

        jButton14.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jProgressBar2.setBackground(new Color(0, 204, 0));

        jProgressBar3.setBackground(new Color(0, 204, 0));

        jProgressBar4.setBackground(new Color(0, 204, 0));

        jProgressBar5.setBackground(new Color(0, 204, 0));

        jProgressBar6.setBackground(new Color(0, 204, 0));

        jProgressBar7.setBackground(new Color(0, 204, 0));

        jProgressBar8.setBackground(new Color(0, 204, 0));

        jProgressBar9.setBackground(new Color(0, 204, 0));

        jProgressBar10.setBackground(new Color(0, 204, 0));

        jButton16.setText("Upload MNIST Image");
        jButton16.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jButton16ActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        jLabel10.setText("Predicted Value is ");

        jButton18.setText("Train &Test with Object Dataset");
        jButton18.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    jButton18ActionPerformed(evt);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
            }
        });

        jLabel11.setText("Accuracy");

        jLabel12.setText("Accuracy");

        jLabel13.setText("Accuracy");

        jLabel14.setText("Accuracy");

        jLabel15.setText("Accuracy");

        jLabel16.setText("Accuracy");

        jLabel17.setText("Accuracy");

        jLabel18.setText("Accuracy");

        jLabel19.setText("Accuracy");

        jLabel20.setText("Accuracy");

        jLabel22.setText("MNIST dataset Accuracy");

        jLabel23.setText("Top/T-shirt");

        jLabel24.setText("Dress");

        jLabel25.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel25.setText("Iris Dataset");

        jLabel26.setText("Trouser");

        jLabel27.setText("Shirt");

        jLabel28.setText("Ankle Boot");

        jLabel29.setText("Sneakers");

        jLabel30.setText("Bag");

        jLabel31.setText("Sandal");

        jLabel32.setText("Hoodie");

        jLabel21.setText("For 85% accuracy Requires 50 to 70 Iterations");

        jLabel34.setText("Overall Accuracy for Object Dataset");

        jLabel35.setText("Training - Data (Check Console As well)");

        jLabel36.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel36.setText("MNIST Dataset");

        jLabel33.setText("Coat/Jacket");

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton6, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12))
                                    .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jButton10, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel13)
                                                .addComponent(jLabel33)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jButton11, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel31)
                                                .addComponent(jLabel23)))))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jProgressBar6, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jProgressBar5, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel36))
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton9, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton8, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton13, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton14, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel24)
                                            .addComponent(jLabel32)
                                            .addComponent(jLabel29)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jProgressBar4, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addGap(18, 18, 18)
                                                .addComponent(jProgressBar3, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel17)
                                                    .addComponent(jLabel14))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jProgressBar9, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jProgressBar8, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE))))
                                        .addGap(57, 57, 57)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jButton12, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jButton15, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel19)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jLabel27, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(jProgressBar7, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jProgressBar10, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel20)
                                                        .addGap(26, 26, 26)
                                                        .addComponent(jLabel28, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)))
                                                .addContainerGap())
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jButton7, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jLabel18)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel26, GroupLayout.PREFERRED_SIZE, 207, GroupLayout.PREFERRED_SIZE)
                                                        .addContainerGap(827, Short.MAX_VALUE))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jProgressBar2, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                                                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(267, 267, 267)
                                        .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 185, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(165, 165, 165)
                                        .addComponent(jLabel7)
                                        .addGap(48, 48, 48)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel22)
                                            .addComponent(mnist_accuracy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35)
                                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 294, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1))
                                .addGap(160, 160, 160)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField5, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField4, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addGap(344, 344, 344)
                                .addComponent(jLabel38, GroupLayout.PREFERRED_SIZE, 66, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4, GroupLayout.PREFERRED_SIZE, 248, GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(jButton3, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addGroup(GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton18, GroupLayout.PREFERRED_SIZE, 279, GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(jLabel34))
                                    .addComponent(jLabel21, GroupLayout.Alignment.LEADING))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(overallAccuracy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 248, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField6, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton16))))
                        .addGap(0, 1087, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel25)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel35))
                            .addComponent(jLabel38, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 293, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jTextField4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextField5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22))
                                .addGap(10, 10, 10)
                                .addComponent(mnist_accuracy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 142, GroupLayout.PREFERRED_SIZE)))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton16)
                            .addComponent(jButton2))
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 6, Short.MAX_VALUE)
                                .addComponent(jLabel36, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(jTextField6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton18)
                            .addComponent(jLabel34))
                        .addGap(18, 18, 18))
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(overallAccuracy, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)))
                .addComponent(jLabel21)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jProgressBar2, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel18))
                                .addGap(9, 9, 9))
                            .addComponent(jButton6, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton9, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jProgressBar4, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel24))
                            .addComponent(jButton7, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel23)
                        .addGap(45, 45, 45)))
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(19, 19, 19)
                                .addComponent(jLabel31))
                            .addComponent(jButton11, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addComponent(jButton10, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton8, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jProgressBar10, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel20)
                                            .addComponent(jLabel28, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton15, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel17)
                                                    .addComponent(jProgressBar8, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel29))
                                            .addComponent(jButton13, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(jProgressBar5, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel13))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel33)))))
                                .addGap(18, 18, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(jProgressBar6, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel16, GroupLayout.Alignment.TRAILING)
                                            .addComponent(jProgressBar3, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel32)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jProgressBar7, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel19)
                                            .addComponent(jLabel27, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jButton12, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE))
                                .addGap(143, 143, 143)))
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar9, GroupLayout.PREFERRED_SIZE, 20, GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel30))
                                .addComponent(jButton14, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(52, Short.MAX_VALUE))))
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double[][] trainingData;
        double[][] trainingResults;
        IrisData data_object;
        data_object = new IrisData();
        trainingData = data_object.getTrainingData();
        trainingResults = data_object.getTrainingResults();
        backpropagationNeuralNetworks = new BackpropNeuralNetwork(4, 6, 3);

        for (int iterations = 0; iterations < NNConstants.ITERATIONS; iterations++) {

            for (int i = 0; i < trainingResults.length; i++) {
                backpropagationNeuralNetworks.train(trainingData[i], trainingResults[i], NNConstants.LEARNING_RATE, NNConstants.MOMENTUM);
            }

            if ((iterations + 1) % 1 == 0) {

                System.out.println("Iteration #" + iterations + "\n");
                jTextArea1.append("Iteration #" + iterations+"\n");
                for (int i = 0; i < trainingResults.length; i++) {
                    double[] data = trainingData[i];
                    double[] calculatedOutput = backpropagationNeuralNetworks.run(data);
                    String s = (float)data[0] + ", " + (float)data[1] + ", " + (float)data[2] + ", " + (float)data[3] + " --> " + Math.round(calculatedOutput[0]) + " - " + Math.round(calculatedOutput[1]) + " - " + Math.round(calculatedOutput[2]);
                    System.out.println(s);
                    jTextArea1.append((float)data[0]+", "+(float)data[1]+", "+(float)data[2]+", "+(float)data[3]+" --> " + Math.round(calculatedOutput[0])+" - "+ Math.round(calculatedOutput[1])+" - "+ Math.round(calculatedOutput[2])+"\n");
                }
            }
        }

        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(ActionEvent evt) throws FileNotFoundException {//GEN-FIRST:event_jButton3ActionPerformed
        System.out.println("CSV is being Loaded and Converted as per the Neural Networks");
        System.out.println(" We are in the Training phase of The MNIST Dataset");
        System.out.println("CSV succeffsully converted to the required Form");

                csvtoArray cs = new csvtoArray();
                csvtoarray2 cs2 = new csvtoarray2();

                double[][] trainingResults = new double[0][];
                try {
                    trainingResults = cs.sample("MNIST_Dataset_train.csv", 32000);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                double[][] trainingData = new double[0][];
                try {
                    trainingData = cs2.sample("MNIST_Dataset_train.csv", 32000);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }

                System.out.println("Initialised Network with 2 hidden layers");
                System.out.println(" Hidden Layers : 1 -> 315, 2-> 28");
                backpropagationNeuralNetworks = new BackpropNeuralNetwork(784, 315, 20, 10);
                //initialise the confusion matrix.
                System.out.println("Training the network with the dataset for 1  times");
                System.out.println("");
                for (int iterations = 0; iterations < NNConstants.ITERATIONS; iterations++) {
                    double[] calculatedOutput;

                    // we are training the systems here, that is back propagating
                    for (int i = 0; i < trainingResults.length; i++) {

                        backpropagationNeuralNetworks.train(trainingData[i], trainingResults[i], NNConstants.LEARNING_RATE, NNConstants.MOMENTUM);
                        System.out.println("Numbers of Trainings Left in the Dataset " + (trainingResults.length-i));
                        System.out.println("Interations No : " + (iterations+1));
                    }

                }

                System.out.println("Training Finised and Now u can Test the MNIST dataset");
                jTextArea1.append("Training Finised and Now u can Test the MNIST dataset");



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextArea1.setText("Lets Predict which dataset does it belong");
        jTextArea1.append("Please enter the Attribute information to predict which category does it belong "+ "\n");
        jTextArea1.append("Please look at the information Below");
        jTextArea1.append("7. Attribute Information:\n" +
                "   1. sepal length in cm\n" +
                "   2. sepal width in cm\n" +
                "   3. petal length in cm\n" +
                "   4. petal width in cm\n" +
                "   5. class: \n" +
                "      -- Iris Setosa\n" +
                "      -- Iris Versicolour\n" +
                "      -- Iris Virginica");
        double sepal_length=0;
        double sepal_width = 0;
        double petal_length=0;
        double petal_width=0;
//        if(jTextField1.getText() == "" || jTextField2.getText() == "" || jTextField3.getText() == "" || jTextField4.getText() == "") {
//
//
//
//        }else{
             sepal_length = Float.parseFloat(jTextField1.getText());
             sepal_width = Float.parseFloat(jTextField2.getText());
             petal_length = Float.parseFloat(jTextField4.getText());
             petal_width = Float.parseFloat(jTextField3.getText());

     //   }



        System.out.println(sepal_length);
        System.out.println(sepal_width);
        System.out.println(petal_width);
        System.out.println(petal_length);
        double[] data = new double[]{sepal_length,sepal_width,petal_length,petal_width};
        double[] calculatedOutput = backpropagationNeuralNetworks.run(data);
        Iris_Prediction iris = new Iris_Prediction(jTextField5);
        iris.predict(calculatedOutput);
        jTextArea1.append("\n");
        jTextArea1.append("Value Predicted" + jTextField5.getText());

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(ActionEvent evt) throws FileNotFoundException {//GEN-FIRST:event_jButton4ActionPerformed
        System.out.println("CSV is being Loaded and Converted as per the Neural Networks");
        csvtoArray cs = new csvtoArray();
        csvtoarray2 cs2 = new csvtoarray2();
        System.out.println("CSV is being Loaded and Converted as per the Neural Networks");
        double[][] testingResults = cs.sample("MNIST_Dataset_test.csv", 10000);
        double[][] testingData = cs2.sample("MNIST_Dataset_test.csv", 10000);
        int[][] confusion_matrix = new int[10][10];
        for (int i = 0; i < testingResults.length; i++) {
            double[] calculatedOutput;
            double[] data = testingData[i];
            //System.out.println(Arrays.toString(data));
            // System.out.println(Arrays.toString(data));
            calculatedOutput = backpropagationNeuralNetworks.run(data);
            System.out.println(i + 1 + " ");
            System.out.println(calculatedOutput[0] + " " + calculatedOutput[1] + " " + calculatedOutput[2] + " " + calculatedOutput[3] + " " + calculatedOutput[4] + " " + calculatedOutput[5] + " " + calculatedOutput[6] + " " + calculatedOutput[7] + " " + calculatedOutput[8] + " " + calculatedOutput[9]);

            int largest_index = 0;
            for (int j = 1; j < calculatedOutput.length; j++) {
                if (calculatedOutput[j] > calculatedOutput[largest_index]) {
                    largest_index = j;
                }
            }

            // System.out.println(calculatedOutput[largest_index] + "----------");
            // System.out.println("----------");
            int largest_index_testing_results = 0;
            for (int j = 1; j < testingResults[i].length; j++) {

                // System.out.println(Arrays.toString(testingResults[i]));
                if (testingResults[i][j] > testingResults[i][largest_index_testing_results]) {
                    largest_index_testing_results = j;
                }
            }

            //   System.out.println(largest_index);
            //  System.out.println(largest_index_testing_results);
            // update confusion matrix
            confusion_matrix[largest_index][largest_index_testing_results] = confusion_matrix[largest_index][largest_index_testing_results] + 1;
        }
        // print confusion matrix
        // print confusion matrix
        float[] recall_arr = new float[confusion_matrix.length];
        float[] prec_arr = new float[confusion_matrix.length];
        float avg_precision = 0;
        float avg_recall = 0;
        float accuracy = 0;
        float tpfp=0;
        for (int k = 0; k < confusion_matrix.length; k++) {
            float tp = 0;
            float tpfn = 0;
            int j;
            for (j = 0; j < confusion_matrix.length; j++) {
                tpfn +=confusion_matrix[k][j];
                tpfp += confusion_matrix[j][k];
                if( k == j){
                    tp+= confusion_matrix[k][j];
                    accuracy += confusion_matrix[k][j];
                }
                System.out.print(confusion_matrix[k][j] + " ");
            }
            System.out.println(
                    "Precision for "
                            + k + " = " + tp/tpfp);
            prec_arr[k] = tp/tpfp;
            avg_precision += tp/tpfp;
            avg_recall += tp/tpfn;
            tpfp =0;
            //System.out.println(tp+"tp ");
            System.out.println(" recall => "+(tp/tpfn));
            recall_arr[k] = (tp/tpfn);
            System.out.println("----");
        }
        avg_precision = avg_precision/10;
        avg_recall=avg_recall/10;
        System.out.println("Average precision "+ avg_precision);
        System.out.println("Average recall "+ avg_recall);
        System.out.println("Accuracy = > "+accuracy/10000);
        System.out.println("Error rate = > "+(1-(accuracy/10000)));
        float F1_score = (2*(avg_precision*avg_recall))/(avg_precision+avg_recall);
        System.out.println("F1 Score for the model => "+F1_score);
        float[] arr = new float[confusion_matrix.length];
        for(int i =0;i < confusion_matrix.length;i++) {
            int x = 0;
            int y = 0;
            for (int j = 0; j < confusion_matrix.length; j++) {
                if (i == j) {
                    x = x + confusion_matrix[i][j];
                }
                y = y + confusion_matrix[i][j];
            }
            arr[i] = x/(x+y);
        }


        jTextArea1.setText("Confusion Matrix is as follows\n");
        // print the confusion Matrix in JTextArea
        for(int x =0; x < confusion_matrix.length; x++) {
            jTextArea1.append("[");
            for(int j =0; j < confusion_matrix.length; j++) {

                jTextArea1.append(Integer.toString(confusion_matrix[x][j]));
                jTextArea1.append("  ");
            }

            jTextArea1.append("]");
            jTextArea1.append(" "+ "\n");
        }
        jTextArea1.append("Precision For each digit \n" + Arrays.toString(prec_arr));
         jTextArea1.append("\n" + "Recall Value For each digit \n" + Arrays.toString(recall_arr));
        jTextArea1.append("\nAverage precision "+ avg_precision/10);
        jTextArea1.append(" ----\n\n");
        jTextArea1.append("Average recall "+ avg_recall/10);
        jTextArea1.append(" ----\n\n");
        jTextArea1.append("Accuracy = >"+accuracy/10000);
        jTextArea1.append(" ----\n\n");
        jTextArea1.append("Error rate = >"+(1-(accuracy/10000)));
        jTextArea1.append(" ----\n\n");
        jTextArea1.append("F1 Score for the model => "+F1_score);
        jTextArea1.append(" ----\n\n");
        mnist_accuracy.setStringPainted(true);
        mnist_accuracy.setForeground(Color.blue);
        mnist_accuracy.setString(Integer.toString((int)((accuracy/10000)*100)));
        mnist_accuracy.setValue((int)((accuracy/10000)*100));
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
            
          
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(ActionEvent evt) throws IOException {//GEN-FIRST:event_jButton16ActionPerformed
        String filename = null;
             JFileChooser chooser  = new JFileChooser();
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File myFile = chooser.getSelectedFile();
            filename   = myFile.getAbsolutePath();
              
               
               int width = 963;    //width of the image 
        int height = 640;   //height of the image 
  
        // For storing image in RAM 
        BufferedImage image = null; 
        // READ IMAGE 
        try
        { 
            File input_file = new File(filename); //image file path 
  
            /* create an object of BufferedImage type and pass 
               as parameter the width,  height and image int 
               type.TYPE_INT_ARGB means that we are representing 
               the Alpha, Red, Green and Blue component of the 
               image pixel using 8 bit integer value. */
            image = new BufferedImage(width, height, 
                                    BufferedImage.TYPE_INT_ARGB); 
  
             // Reading input file 
            image = ImageIO.read(input_file); 
  
            System.out.println("Reading complete."); 
        } 
        catch(IOException e) 
        { 
            System.out.println("Error: "+e); 
        } 
        Image scaledImage = image.getScaledInstance(jLabel9.getWidth(),jLabel9.getHeight(),Image.SCALE_SMOOTH);
               jLabel9.setIcon(new ImageIcon(scaledImage));
                }
        double[] calculatedOutput;
        jTextArea1.setText("Started the Prediction Process");
        jTextArea1.setText("Conversion in Progress");
        ImageToPixel ip = new ImageToPixel();
       double[] x =  ip.imageToPixel(filename);
       calculatedOutput =  backpropagationNeuralNetworks.run(x);
       Helper sample = new Helper();
        int largest_index = sample.SpecialSort_One(calculatedOutput);
        System.out.println(Arrays.toString(calculatedOutput));
        System.out.println(largest_index);
        jTextField6.setText(Integer.toString(largest_index));
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton18ActionPerformed(ActionEvent evt) throws FileNotFoundException {//GEN-FIRST:event_jButton18ActionPerformed
        System.out.println("Loading the Training Dataset");
        System.out.println("Number of Iterations are 50");
        csvtoArray cs = new csvtoArray();
        imageToCsv_ObjectDataset cs2 = new imageToCsv_ObjectDataset();
        System.out.println("Dataset Loaded and Processed as per the Neural Network");
        double[][] trainingResults = cs.sample("object_train.csv", 60000);
        double[][] trainingData = cs2.sample("object_train.csv", 60000);

        System.out.println("Initialised Network with 2 hidden layers");
        System.out.println(" Hidden Layers : 1 -> 315, 2-> 28");
        //  BackpropNeuralNetwork backpropagationNeuralNetworks = new BackpropNeuralNetwork(784, 784, 784, 10);
        BackpropNeuralNetwork backpropagationNeuralNetworks = new BackpropNeuralNetwork(784, 16, 16, 10);

        //initialise the confusion matrix.
        System.out.println("Training the network with the dataset for 1  times");
        System.out.println("");
        for (int iterations = 0; iterations < NNConstants.ITERATIONS_OBJECT_DATASET; iterations++) {
            double[] calculatedOutput;

            // we are training the systems here, that is back propagating
            for (int i = 0; i < trainingResults.length; i++) {
                backpropagationNeuralNetworks.train(trainingData[i], trainingResults[i], NNConstants.LEARNING_RATE, NNConstants.MOMENTUM);
                System.out.println("Number of Trainings left " + (trainingResults.length - i));
                System.out.println("Interations  : " + (NNConstants.ITERATIONS_OBJECT_DATASET-iterations));
            }

        }

        System.out.println("Training Finised and entered the testing Phase");

        double[][] testingResults = cs.sample("object_test.csv", 10000);
        double[][] testingData = cs2.sample("object_test.csv", 10000);
        int[][] confusion_matrix = new int[10][10];
        for (int i = 0; i < testingResults.length; i++) {
            double[] calculatedOutput;
            double[] data = testingData[i];
            //System.out.println(Arrays.toString(data));
            // System.out.println(Arrays.toString(data));
            calculatedOutput = backpropagationNeuralNetworks.run(data);
            System.out.println(i + 1 + " ");
            System.out.println(calculatedOutput[0] + " " + calculatedOutput[1] + " " + calculatedOutput[2] + " " + calculatedOutput[3] + " " + calculatedOutput[4] + " " + calculatedOutput[5] + " " + calculatedOutput[6] + " " + calculatedOutput[7] + " " + calculatedOutput[8] + " " + calculatedOutput[9]);

            int largest_index = 0;
            for (int j = 1; j < calculatedOutput.length; j++) {
                if (calculatedOutput[j] > calculatedOutput[largest_index]) {
                    largest_index = j;
                }
            }

            // System.out.println(calculatedOutput[largest_index] + "----------");
            // System.out.println("----------");
            int largest_index_testing_results = 0;
            for (int j = 1; j < testingResults[i].length; j++) {

                // System.out.println(Arrays.toString(testingResults[i]));
                if (testingResults[i][j] > testingResults[i][largest_index_testing_results]) {
                    largest_index_testing_results = j;
                }
            }

            //   System.out.println(largest_index);
            //  System.out.println(largest_index_testing_results);
            // update confusion matrix
            confusion_matrix[largest_index][largest_index_testing_results] = confusion_matrix[largest_index][largest_index_testing_results] + 1;
        }
        // print confusion matrix
        System.out.println("Confusion Matrix is : ");
        float[] recall_arr = new float[confusion_matrix.length];
        float[] prec_arr = new float[confusion_matrix.length];
        float avg_precision = 0;
        float avg_recall = 0;
        float accuracy = 0;
        float tpfp=0;
        for (int k = 0; k < confusion_matrix.length; k++) {
            float tp = 0;
            float tpfn = 0;
            int j;
            for (j = 0; j < confusion_matrix.length; j++) {
                tpfn +=confusion_matrix[k][j];
                tpfp += confusion_matrix[j][k];
                if( k == j){
                    tp+= confusion_matrix[k][j];
                    accuracy += confusion_matrix[k][j];
                }
                System.out.print(confusion_matrix[k][j] + " ");
            }
            System.out.println(
                    "Precision for "
                            + k + " = " + tp/tpfp);
            prec_arr[k] = tp/tpfp;
            avg_precision += tp/tpfp;
            avg_recall += tp/tpfn;
            tpfp =0;
            //System.out.println(tp+"tp ");
            System.out.println(" recall => "+(tp/tpfn));
            recall_arr[k] = (tp/tpfn);
            System.out.println("----");
        }
        avg_precision = avg_precision/10;
        avg_recall=avg_recall/10;
        System.out.println("Average precision"+ avg_precision);
        System.out.println("Average recall"+ avg_recall);
        System.out.println("Accuracy = >"+accuracy/10000);
        System.out.println("Error rate = >"+(1-(accuracy/10000)));
        float F1_score = 2*(avg_precision*avg_recall)/(avg_precision+avg_recall);
        System.out.println("F1 Score for the model => "+F1_score);
        float[] arr = new float[confusion_matrix.length];
       for(int i =0;i < confusion_matrix.length;i++) {
           int x = 0;
           int y = 0;
           for (int j = 0; j < confusion_matrix.length; j++) {
               if (i == j) {
                   x =  confusion_matrix[i][j];
               }
                y = y + confusion_matrix[i][j];
           }
           arr[i] = (float) x/(x+y);
       }
        System.out.println(Arrays.toString(arr));
       for(int i =0; i < arr.length; i++) {
           if(i ==0){
               jProgressBar1.setStringPainted(true);
               jProgressBar1.setForeground(Color.blue);

               jProgressBar1.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar1.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==1) {
               jProgressBar2.setStringPainted(true);
               jProgressBar2.setForeground(Color.blue);
               jProgressBar2.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar2.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==2) {
               jProgressBar3.setStringPainted(true);
               jProgressBar3.setForeground(Color.blue);
               jProgressBar3.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar3.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==3) {
               jProgressBar4.setStringPainted(true);
               jProgressBar4.setForeground(Color.blue);
               jProgressBar4.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar4.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==4) {
               jProgressBar5.setStringPainted(true);
               jProgressBar5.setForeground(Color.blue);
               jProgressBar5.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar5.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==5) {
               jProgressBar6.setStringPainted(true);
               jProgressBar6.setForeground(Color.blue);
               jProgressBar6.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar6.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==6) {
               jProgressBar7.setStringPainted(true);
               jProgressBar7.setForeground(Color.blue);
               jProgressBar7.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar7.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==7) {
               jProgressBar8.setStringPainted(true);
               jProgressBar8.setForeground(Color.blue);
               jProgressBar8.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar8.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==8) {
               jProgressBar9.setStringPainted(true);
               jProgressBar9.setForeground(Color.blue);
               jProgressBar9.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar9.setValue(Math.round(recall_arr[i]*100));
           }else if(i ==9) {
               jProgressBar10.setStringPainted(true);
               jProgressBar10.setForeground(Color.blue);
               jProgressBar10.setString(Integer.toString(Math.round(recall_arr[i]*100)));
               jProgressBar10.setValue(Math.round(recall_arr[i]*100));
           }
       }

            // print the confusion Matrix in JTextArea
        for(int x =0; x < confusion_matrix.length; x++) {
            jTextArea1.append("----[");
            for(int j =0; j < confusion_matrix.length; j++) {
                jTextArea1.append(Integer.toString(confusion_matrix[x][j]));
                jTextArea1.append("  ");
            }
            jTextArea1.append("]-----");
            jTextArea1.append(" "+ "\n");

        }
        jTextArea1.append("Precision Value for Every Object" + Arrays.toString(prec_arr));
        jTextArea1.append("\n" + "Recall Value for Every object" + Arrays.toString(recall_arr));
        jTextArea1.append("\nAverage precision"+ avg_precision/10);
        jTextArea1.append("---------\n");
        jTextArea1.append("Average recall"+ avg_recall/10);
        jTextArea1.append("---------\n");
        jTextArea1.append("Accuracy = >"+accuracy/10000);
        overallAccuracy.setStringPainted(true);
        overallAccuracy.setForeground(Color.blue);
        overallAccuracy.setString(Integer.toString(Math.round((int)((accuracy/10000)*100))));
        overallAccuracy.setValue((int)((accuracy/10000)*100));
        jTextArea1.append("---------\n");
        jTextArea1.append("Error rate = >"+(1-(accuracy/10000)));
        jTextArea1.append("---------\n");
        jTextArea1.append("F1 Score for the model => "+F1_score);
        jTextArea1.append("---------\n");
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new NewJFrame().setVisible(true);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void resizing() throws IOException {
        BufferedImage img = ImageIO.read(new File("T-shirt.jpg"));
        BufferedImage img2 = ImageIO.read(new File("Trouser.jpg"));
        BufferedImage img3 = ImageIO.read(new File("PullOver.jpg"));
        BufferedImage img4 = ImageIO.read(new File("dress.jpg"));
        BufferedImage img5 = ImageIO.read(new File("coat.jpg"));
        BufferedImage img6 = ImageIO.read(new File("sandel.jpg"));
        BufferedImage img7 = ImageIO.read(new File("shirt.jpg"));
        BufferedImage img8 = ImageIO.read(new File("Bag.jpg"));
        BufferedImage img9 = ImageIO.read(new File("Sneaker.jpg"));
        BufferedImage img10 = ImageIO.read(new File("Ankle-boot.jpg"));
        BufferedImage baseImage = ImageIO.read(new File("NN.png"));
        BufferedImage irisImage = ImageIO.read(new File("iris.png"));
        BufferedImage mnistImage = ImageIO.read(new File("MNIST.png"));
        BufferedImage objectImage = ImageIO.read(new File("object.png"));
        ObjectResize ob = new ObjectResize();

        ob.resize(img, jButton6.getHeight(), jButton6.getWidth(), "T-shirt.jpg");
        ob.resize(img2, jButton7.getHeight(), jButton7.getWidth(), "Trouser.jpg");
        ob.resize(img3, jButton8.getHeight(), jButton8.getWidth(), "PullOver.jpg");
        ob.resize(img4, jButton9.getHeight(), jButton9.getWidth(), "dress.jpg");
        ob.resize(img5, jButton10.getHeight(), jButton10.getWidth(), "coat.jpg");
        ob.resize(img6, jButton11.getHeight(), jButton11.getWidth(), "sandel.jpg");
        ob.resize(img7, jButton12.getHeight(), jButton12.getWidth(), "shirt.jpg");
        ob.resize(img8, jButton13.getHeight(), jButton13.getWidth(), "Bag.jpg");
        ob.resize(img9, jButton13.getHeight(), jButton13.getWidth(), "Sneaker.jpg");
        ob.resize(img10, jButton14.getHeight(), jButton14.getWidth(), "Ankle-boot.jpg");
        ob.resize(baseImage,jLabel38.getHeight(), jLabel38.getWidth(), "NN.png");
     
        jButton6.setIcon(new ImageIcon("T-shirt.jpg"));
        jButton7.setIcon(new ImageIcon("Trouser.jpg"));
        jButton8.setIcon(new ImageIcon("PullOver.jpg"));
        jButton9.setIcon(new ImageIcon("dress.jpg"));
        jButton10.setIcon(new ImageIcon("coat.jpg"));
        jButton11.setIcon(new ImageIcon("sandel.jpg"));
        jButton12.setIcon(new ImageIcon("shirt.jpg"));
        jButton13.setIcon(new ImageIcon("Sneaker.jpg"));
        jButton14.setIcon(new ImageIcon("Bag.jpg"));
        jButton15.setIcon(new ImageIcon("Ankle-boot.jpg"));

        jLabel38.setIcon(new ImageIcon("NN.png"));


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JButton jButton10;
    private JButton jButton11;
    private JButton jButton12;
    private JButton jButton13;
    private JButton jButton14;
    private JButton jButton15;
    private JButton jButton16;
    private JButton jButton18;
    private JButton jButton2;
    private JButton jButton3;
    private JButton jButton4;
    private JButton jButton6;
    private JButton jButton7;
    private JButton jButton8;
    private JButton jButton9;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel16;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel jLabel2;
    private JLabel jLabel20;
    private JLabel jLabel21;
    private JLabel jLabel22;
    private JLabel jLabel23;
    private JLabel jLabel24;
    private JLabel jLabel25;
    private JLabel jLabel26;
    private JLabel jLabel27;
    private JLabel jLabel28;
    private JLabel jLabel29;
    private JLabel jLabel3;
    private JLabel jLabel30;
    private JLabel jLabel31;
    private JLabel jLabel32;
    private JLabel jLabel33;
    private JLabel jLabel34;
    private JLabel jLabel35;
    private JLabel jLabel36;
    private JLabel jLabel38;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JProgressBar jProgressBar1;
    private JProgressBar jProgressBar10;
    private JProgressBar jProgressBar2;
    private JProgressBar jProgressBar3;
    private JProgressBar jProgressBar4;
    private JProgressBar jProgressBar5;
    private JProgressBar jProgressBar6;
    private JProgressBar jProgressBar7;
    private JProgressBar jProgressBar8;
    private JProgressBar jProgressBar9;
    private JScrollPane jScrollPane1;
    private JTextArea jTextArea1;
    private JTextField jTextField1;
    private JTextField jTextField2;
    private JTextField jTextField3;
    private JTextField jTextField4;
    private JTextField jTextField5;
    private JTextField jTextField6;
    private JProgressBar mnist_accuracy;
    private JProgressBar overallAccuracy;
    // End of variables declaration//GEN-END:variables
}


